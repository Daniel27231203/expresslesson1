import { NextFunction, Request, Response } from "express";
import { PrismaClient, Category } from "@prisma/client";
import { AuthRequest } from "../../types/schema";

const prisma = new PrismaClient();

// ? get products start

const getAllProducts = async (req: Request, res: Response) => {
  try {
    const responseData = await prisma.products.findMany({
      include: {
        author: {
          select: {
            id: true,
            name: true,
            email: true,
            profilePhoto: true,
            isAdmin: true,
          },
        },
      },
    });

    res.status(200).json({
      success: true,
      results: responseData,
    });
  } catch (e) {
    console.error(`Error fetching products:`, e);
    res.status(500).json({
      success: false,
      message: "Error fetching products",
    });
  }
};

const getOne = async (req: Request, res: Response) => {
  const id = Number(req.params.id);
  const products = await prisma.products.findUnique({
    where: { id },
    include: {
      author: {
        select: {
          id: true,
          name: true,
          email: true,
          profilePhoto: true,
          isAdmin: true,
        },
      },
    },
  });
  if (products) {
    try {
      res.status(200).send({
        message: "success",
        data: products,
      });
    } catch (e) {
      res.status(404).send({ message: "–∏–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç!" });
    }
  } else {
    res.status(404).send({ message: "–∏–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç!" });
  }
};

// ? get products end

// ? createProduct start
const createProducts = async (
  req: AuthRequest,
  res: Response,
  next: NextFunction
) => {
  try {
    const { title, price, image, description, category } = req.body;
    const userEmail = req.email;

    if (!userEmail) throw new Error("User email is required");

    if (!title || !price || !description) {
      throw res.status(400).json({ message: "All fields are required" });
    }

    const validCategories = [
      "GADGETS",
      "TECHNICS",
      "CLOTHES_MEN",
      "CLOTHES_WOMEN",
      "CONSTRUCTION_EQUIPMENT",
      "BOOKS",
    ];

    if (!validCategories.includes(category)) {
      throw res.status(400).json({ message: "Invalid category value" });
    }

    const user = await prisma.user.findUnique({
      where: { email: userEmail },
    });

    if (!user) {
      throw res.status(404).json({ message: "User not found" });
    }

    const newProduct = await prisma.products.create({
      data: {
        title,
        price: Number(price),
        image,
        description,
        category,
        authorEmail: user.email,
      },
    });

    res.status(201).json({
      message: "Product created successfully",
      data: newProduct,
    });
  } catch (e) {
    res.status(500).json({ message: "server error", error: e });
  }
};

// ? createProduct end

// ? update product start
const updateProducts = async (req: AuthRequest, res: Response) => {
  try {
    const id = Number(req.params.id);
    const { title, price, image, description, category } = req.body;
    const userEmail = req.email;

    if (isNaN(id)) {
      throw res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞" });
    }

    if (!title || !description || !price || !category) {
      throw res
        .status(400)
        .json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è" });
    }

    const validCategories = [
      "GADGETS",
      "TECHNICS",
      "CLOTHES_MEN",
      "CLOTHES_WOMEN",
      "CONSTRUCTION_EQUIPMENT",
      "BOOKS",
    ];

    if (!validCategories.includes(category)) {
      throw res
        .status(400)
        .json({ message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" });
    }

    const product = await prisma.products.findUnique({
      where: { id },
      include: { author: true },
    });

    if (!product) {
      throw res.status(404).json({ message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    if (product.author.email !== userEmail) {
      throw res
        .status(403)
        .json({ message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!" });
    }

    const updatedProduct = await prisma.products.update({
      where: { id },
      data: {
        title,
        price: Number(price),
        image,
        description,
        category,
      },
    });

    res.status(200).json({
      message: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
      data: updatedProduct,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

//? update product end

// ? deleteProducts start
const deleteOnproducts = async (req: AuthRequest, res: Response) => {
  try {
    const id = Number(req.params.id);
    const userEmail = req.email;

    const newproducts = await prisma.products.findUnique({
      where: { id },
      include: { author: true },
    });
    if (!newproducts) {
      throw res.status(404).json({ message: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }
    if (newproducts.author.email !== userEmail) {
      throw res
        .status(403)
        .json({ message: "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞!" });
    }

    const deleteProduct = await prisma.products.delete({ where: { id: id } });
    res.status(200).send({
      message: `successfuly deleted`,
      data: deleteProduct,
    });
  } catch (e) {
    res.status(500).send({
      message: `server error: ${e}`,
    });
  }
};
const deleteAllUserProducts = async (req: AuthRequest, res: Response) => {
  try {
    const userEmail = req.email;

    const user = await prisma.user.findUnique({
      where: { email: userEmail },
      include: { products: true },
    });

    if (!user) {
      throw res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
    }

    if (user.products.length === 0) {
      throw res
        .status(404)
        .json({ message: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!" });
    }

    await prisma.products.deleteMany({
      where: { authorEmail: userEmail },
    });

    res.status(200).json({ message: "–í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const deleteAll = async (req: Request, res: Response) => {
  try {
    await prisma.products.deleteMany();
    res.status(200).send({ message: "All productss deleted successfully" });
  } catch (e) {
    res.status(500).send({ message: "Server error" });
  }
};

// ? deleteProduct end

// ? getProducts By Category

const getProductsByCategory = async (req: Request, res: Response) => {
  const category = req.params.category as Category; // Cast to the enum type
  console.log("üöÄ ~ getProductsByCategory ~ category:", category);
  if (!category) {
    throw res.status(400).send({
      success: false,
      message: "Category is required",
    });
  }
  const validCategories = [
    "GADGETS",
    "TECHNICS",
    "CLOTHES_MEN",
    "CLOTHES_WOMEN",
    "CONSTRUCTION_EQUIPMENT",
    "BOOKS",
  ];

  if (!validCategories.includes(category)) {
    throw res.status(400).json({ message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" });
  }
  try {
    const responseData = await prisma.products.findMany({
      where: { category },
      include: {
        author: {
          select: {
            id: true,
            name: true,
            email: true,
            profilePhoto: true,
            isAdmin: true,
          },
        },
      },
    });
    res.status(200).send({
      success: true,
      results: responseData,
    });
  } catch (e) {
    console.log(`error in ${e}`);
    res.status(500).send({
      success: false,
      message: "Error fetching products",
    });
  }
};

// ? getProducts By Category

// ! didnt work
/* const searchMany = async (req: Request, res: Response) => {
  const value = String(req.query.value);
  if (!value.trim()) {
    return res.status(400).send({
      success: false,
      message: "value is required",
    });
  }
  try {
    const responseData = await prisma.products.findMany();
    const response = responseData.filter((el) =>
      el.title.toLowerCase().includes(value?.toLowerCase())
    );
    res.status(200).send({
      success: true,
      results: response,
    });
  } catch (e) {
    console.log(`error in ${e}`);
    res.status(500).send({
      success: false,
      message: "Error fetching productss",
    });
  }
}*/

// const getUserProducts = async (req: Request, res: Response) => {
//   try {
//     const { userId } = req.params;

//     const products = await prisma.products.findMany({
//       where: { authorId: Number(userId) },
//     });

//     if (!products.length) {
//       return res.status(404).json({ message: "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
//     }

//     res.status(200).json({
//       message: "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
//       data: products,
//     });
//   } catch (e) {
//     res.status(500).json({ message: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${e}` });
//   }
// };

// !

export default {
  getAllProducts,
  createProducts,
  deleteOnproducts,
  updateProducts,
  getOne,
  deleteAll,
  deleteAllUserProducts,
  getProductsByCategory,
  // searchMany,
  // getUserProducts,
};
